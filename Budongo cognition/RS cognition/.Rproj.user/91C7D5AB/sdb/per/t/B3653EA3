{
    "contents" : "### Analysis of Ruth Sonnweber's cognitive data\n\n# 1. Distinguish between Interaction levels\n#   a. chimps who did not participate\n#   b. chimps who were trained but did not proceed to testing (EM, LB, ED, LO, DA)\n#   c. chimps who were tested but did not complete all stages (CI, EV, PA)\n#   d. chimps who finished all tasks (FK, KL, PE)\n# 2. Look at the number of trials taken to complete each stage of training\n#     discrete-time hazard model\n# 3. Model accuracy across all trials\n#   - all training trials? (etc...)\n# 4. Model RT\n#   - number of touches\n\n#######\n\n### [1] Interaction levels\n\n# this section may be doomed to failure, and ought to be only used for visualization\n# see [2] for replacement\n\n# a. HE, LI, RE, Q, KD, LU, SO\n# b. EM, LB, ED, LO, DA\n# c. CI, EV, PA\n# d. FK, KL, PE \n\nRSpartic = as.ordered(c(2,1,1,1,2,3,0,3,0,0,1,1,0,2,3,0,0,0))\nintLvlPers = cbind(aggPers,RSpartic)\n\nRStm <- aggregate(intLvlPers, by=list(intLvlPers$RSpartic), FUN=mean)\nRSts <- aggregate(intLvlPers, by=list(intLvlPers$RSpartic), FUN=sd)\n\nmp = barplot(height=as.matrix(RStm[4:9]),beside=TRUE,\n             #legend.text=c('Never participated','Incomplete participation','Completed full sessions')\n             ,ylim=c(0,7))\n\nsegments(c(mp), c(t(t(RStm[4:9] - RSts[4:9]))), c(mp),c(t(t(RStm[4:9] + RSts[4:9]))), lwd=2)\n\n### a possible addition:\n### compare individuals who never participated, to those who did (to some degree)\n\n## also... Lyndsey was alive\n## this will have impact on how we calculate Z scores for pers\n\nRSpartic = as.ordered(c(1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0))\nintLvlPers2 = cbind(RSpartic, aggPers)\n\nRStm <- aggregate(intLvlPers2, by=list(intLvlPers2$RSpartic), FUN=mean)\nRSts <- aggregate(intLvlPers2, by=list(intLvlPers2$RSpartic), FUN=sd)\n\nmp = barplot(height=as.matrix(RStm[5:10]),beside=TRUE,\n             #legend.text=c('Never participated','Incomplete participation','Completed full sessions')\n             ,ylim=c(0,7))\n\nsegments(c(mp), c(t(t(RStm[5:10] - RSts[5:10]))), c(mp),c(t(t(RStm[5:10] + RSts[5:10]))), lwd=2)\n\n\nc.t = t.test(intLvlPers2$Conscientiousness[intLvlPers2$RSpartic==1],intLvlPers2$Conscientiousness[intLvlPers2$RSpartic==0])\n# definitely\nn.t = t.test(intLvlPers2$Neuroticism[intLvlPers2$RSpartic==1],intLvlPers2$Neuroticism[intLvlPers2$RSpartic==0])\n# yes\no.t = t.test(intLvlPers2$Openness[intLvlPers2$RSpartic==1],intLvlPers2$Openness[intLvlPers2$RSpartic==0])\n# yes\nd.t = t.test(intLvlPers2$Dominance[intLvlPers2$RSpartic==1],intLvlPers2$Dominance[intLvlPers2$RSpartic==0])\n# yes\n\n\n\n\n\n# starting from 'scratch'\n\n\nbooterLvl <- NULL\nfor (i in 1:500){\n  booterLvl = rbind(booterLvl,intLvlPers)\n}\n\n  \n  \nlibrary(nnet)\nRS.mult.lvl.0 <- multinom(RSpartic ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                            Agreeableness + Extraversion,  data = intLvlPers)\n# this doesn't _really_ seem lke it has worked\n\n\n#polr doesn't work for all predictors\nlibrary(MASS)\nRS.om.lvl.0 <- polr(RSpartic ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                      #Agreeableness + \n                      Extraversion,\n                    data = intLvlPers, model = \"probit\"\n                    )\n\n# nor does clm...\nlibrary(ordinal)\nRS.om.lvl.b0 <- clm(RSpartic ~ Dominance + Conscientiousness + Openness + Neuroticism +\n       Agreeableness + Extraversion,\n     data = booterLvl #, link = \"probit\"\n)\n\nsaveB = Boot(RS.om.lvl.0, R = 1000, method = 'case') # doens't work\n\n\n# ... nope\nlibrary(rms)\nRS.om.lvl.0 <- #orm # is original\n  lrm(RSpartic ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                     Agreeableness + Extraversion,\n                   data = intLvlPers #, model = \"probit\"\n)\n\n\n# \nlibrary(glmnet)\n\nfit3=glmnet(as.matrix(intLvlPers[,3:8]),\n            as.double(intLvlPers$RSpartic)-1,\n            #lapply(intLvlPers$RSpartic,as.numeric),\n            family=\"multinomial\")\n\n\n# I have no idea\nlibrary(VGAM)\nRS.v.0 <- vglm(RSpartic ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                 Agreeableness + Extraversion,\n               data = intLvlPers,\n               family=cumulative(link=\"multilogit\", parallel=TRUE)\n)\n\n\n# let's do this first with the Tukey tests\n#library(multcomp)\nlibrary(DTK)\nRlvlS.dtk.d = DTK.test(intLvlPers$Dominance, intLvlPers$RSpartic)\nRlvlS.dtk.c = DTK.test(intLvlPers$Conscientiousness, intLvlPers$RSpartic)\nRlvlS.dtk.n = DTK.test(intLvlPers$Neuroticism, intLvlPers$RSpartic)\nRlvlS.dtk.o = DTK.test(intLvlPers$Openness, intLvlPers$RSpartic)\n\nlibrary(MASS)\nmod.polr.o <- polr(RSpartic ~ Openness + I(Openness^2), data=intLvlPers)\nmod.polr.c <- polr(RSpartic ~ Conscientiousness + I(Conscientiousness^2), data=intLvlPers)\nmod.polr.d <- polr(RSpartic ~ Dominance + I(Dominance^2), data=intLvlPers) # + I(Dominance^2)\nmod.polr.n <- polr(RSpartic ~ Neuroticism + I(Neuroticism^2), data=intLvlPers)\n\n# below is consistent with above\nmod.polr.ce <- polr(RSpartic ~ Extraversion + Conscientiousness, data=intLvlPers)\nmod.polr.oa <- polr(RSpartic ~ Openness + Agreeableness, data=intLvlPers)\n\n\nmod.polr.odnc <- polr(RSpartic ~ Openness + Dominance + Neuroticism + Conscientiousness, data=intLvlPers)\nmod.polr.all <- polr(RSpartic ~ Extraversion + Openness + Dominance + Neuroticism + Conscientiousness, data=intLvlPers)\n\n\n\n# [2] Trials before drop-out\n#     \n  \n\n# should be able to model each training stage / individual with Surv\n# with frailty for each stage, and individual\n# ending in either completion of the training or dropout\n\n\n#TraTri = temp[temp$stage!='test',]\n#TraTri.1 = TraTri[TraTri$Correctness==' Correct',]\n\nlibrary(plyr)\n#TraTri = aggregate(TraTri, by=list('chimp','stage'), FUN=count)\n\nTraTri = count(temp, c(\"chimp\",\"stage\"))\nTraTri.1 = count(TraTri.1, c(\"chimp\",\"stage\"))\nTraTri$correct = TraTri.1$freq\n\nTraTri$prop = TraTri$correct / TraTri$freq\n\nTraTri = merge(TraTri,aggPers, by.x= \"chimp\", \"Chimp\")\n\n# adding a column for whether the chimp dropped out or not (0: in, 1: dropped)\nTraTri = cbind(TraTri, dropped = c(0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1))\n\nTraTri = merge(TraTri,aggPers, by.x= \"chimp\", \"Chimp\")\n\nlibrary(survival)\ndOut = Surv(TraTri$freq, TraTri$dropped, type='right')\n\n# which distribution should we use?\nthemodel <- (dOut ~ TraTri$Dominance + TraTri$Conscientiousness + TraTri$Openness + \n               TraTri$Neuroticism + TraTri$Agreeableness + TraTri$Extraversion)\nthedistributions<-c(\"weibull\",\"exponential\",\"lognormal\",\"loglogistic\")\n\ndistlist = 0\nLLlist1 = 0\nLLlist2 = 0\nestimates = 0\nfor (i in 1:length(thedistributions)) {\n  thisdist = thedistributions[i]\n  fit = survreg(themodel, dist = thisdist)\n  distlist[i] = thisdist\n  LLlist1[i] = -2*(fit$loglik[1])\n  LLlist2[i] = -2*(fit$loglik[2])\n  estimates[i] = exp(as.numeric(fit$coefficients[2]))  }\nResult = data.frame(distlist, LLlist1, LLlist2, estimates, LLlist1 - LLlist2)\nnames(Result) = c(\"Distribution\", \"-2*LL(Baseline)\", \"-2*LL(Full)\",\"Estimate\")\nResult = Result[order(Result[,3]),]\nResult\n\n\n# basic continuous right censored survival model\n\nRS.drop.aft <- survreg(dOut ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                      Agreeableness + Extraversion, data = TraTri, dist='lognormal')\n\nRS.drop.aft.frail <- survreg(dOut ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                     Agreeableness + Extraversion +\n                       frailty(stage)\n                       , data = TraTri, dist='lognormal')\n# Significant effect for Conscientiousness\n# high Conscientious chimps stay in the task for more trials\n\n\n\n# Cox to double check\nRS.drop.cox <- coxph(dOut ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                       Agreeableness + Extraversion\n                     + frailty(chimp)\n                     , data = TraTri)\n\n\n# sketch model\n\nRS.trial.lmm.tot <- lmer(log(freq) ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                       Agreeableness + Extraversion +\n                       (1 | chimp) + (1 | stage)\n                     , data = TraTri)\n                       \nRS.trial.lmm.prop <- lmer(prop ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                       Agreeableness + Extraversion +\n                       (1 | chimp) + (1 | stage)\n                     , data = TraTri)\n\n# I don't think there is anything here for this kind of model\n\n## Can we model the cumulative functions? Is that what the GLMs do?\n\n\n\n### [3] Accuracy\n\n# \"simple\" GLMM of accuracy predicted by personality\nlibrary(lme4)\nrs.glm1 <- glmer(Correctness ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                   Agreeableness + Extraversion +\n                   (1 | chimp) + (1 | stage/TrialType)  #(1 | Section) + (1 | TrialType) + ,\n                 , data = temp, family = binomial\n)\n# library(arm)\n# standardize() # converts everything to 2SE coefficients\n\nrs.glm1.0 <- glmer(Correctness ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                     Agreeableness + Extraversion + \n                     #Trial +  # adding this does... well, nothing.\n                     (1 | chimp) + (1 | stage) + (1 | TrialType) #+ (1 | Section) + (1 | depend)\n                   # last two look degenerate\n                   , data = temp, family = binomial\n)\n\nconfint(rs.glm1.0, method=\"boot\")\n# annoying, Wald is the only one which works\nrs.accu.ci = confint(rs.glm1.0, method=\"Wald\")\n\n# improve grouping with regards to AB,AA and training stages\n# turns out not to be helpful\n\n# what about just at testing\n# rs.glm1.tstOnly <- glmer(Correctness ~ Dominance + Conscientiousness + Openness + Neuroticism +\n#                        Agreeableness + Extraversion +\n#                        (1 | chimp) #+ (1 | TrialType)  #(1 | Section) + (1 | TrialType) + ,\n#                      , data = temp[temp$TrialType==' Test',], family = binomial\n# )\n## there are multicolinearity / rank deficiency issues with the above, so just leave it\n\n\n\n### Learning\n# after 33/48 trials, chimps progressed to next stage\n\n# how can we get a handle on this?\nsetwd(\"training/2-choice AA1 black/\")\n\n\n# [4] RT\n\nlibrary(car)\n\nrs.rt.lmm.all <- lmer(log(RT) ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                   Agreeableness + Extraversion +\n                     (1 | chimp) + (1 | stage) + (1 | TrialType) #+ (1 | Section) + (1 | depend)\n                 , data = temp\n)\n\nrs.rt.lmm.1 <- lmer(log(RT) ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                        Agreeableness + Extraversion +\n                        (1 | chimp) + (1 | stage) + (1 | TrialType) #+ (1 | Section) + (1 | depend)\n                      , data = temp[temp$Correctness==' Correct',]\n)\n\n# No effects.\n\n## Number of touches:\n\n\n# 738 (?)\n# 728\n\ngrep(\"/\",as.character(temp$Coordinates[728]))\n\nfor (i in 1:dim(temp)[1]){\n  temp$touches[i] = countCharOccurrences('/', as.character(temp$Coordinates[i]))\n  \n}\n# okay that function makes it work\n#countCharOccurrences('/', as.character(temp$Coordinates[728]))\n\n\nrs.touch.lmm <- glmer(touches ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                      Agreeableness + Extraversion +\n                      (1 | chimp) + (1 | stage) + (1 | TrialType) #+ (1 | Section) + (1 | depend)\n                    , data = temp\n                    #, data = temp[temp$Correctness==' Correct',]\n                    , family = poisson(link = \"log\")\n)\nconfint(rs.touch.lmm, method='Wald')\n\nrs.touch.lmm.1 <- glmer(touches ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                        Agreeableness + Extraversion +\n                        (1 | chimp) + (1 | stage) #+ (1 | TrialType) #+ (1 | Section) + (1 | depend)\n                      #, data = temp\n                      , data = temp[temp$Correctness==' Correct',]\n                      , family = poisson(link = \"log\")\n)\nci.touches.1 <- confint(rs.touch.lmm.1, method='Wald')\n\nrs.touch.lmm.0 <- glmer(touches ~ Dominance + Conscientiousness + Openness + Neuroticism +\n                        Agreeableness + Extraversion +\n                        (1 | chimp) + (1 | stage) #+ (1 | TrialType) + (1 | Section) + (1 | depend)\n                      #, data = temp\n                      , data = temp[temp$Correctness==' Incorrect',]\n                      , family = poisson(link = \"log\")\n)\nci.touches.0 <- confint(rs.touch.lmm.0, method='Wald')\n\n\ncountCharOccurrences <- function(char, s) {\n  s2 <- gsub(char,\"\",s)\n  return (nchar(s) - nchar(s2))\n}\n",
    "created" : 1445529063931.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1430458765",
    "id" : "B3653EA3",
    "lastKnownWriteTime" : 1453314997,
    "path" : "C:/Users/s1229179/GitHub/R/Budongo cognition/RS cognition/RS_analysis.R",
    "project_path" : "RS_analysis.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}