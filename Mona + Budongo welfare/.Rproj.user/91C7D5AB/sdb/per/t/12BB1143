{
    "contents" : "###\n# Importing and aggregating behavioural observations\n#\n###\n\n\n### manual importation of Lauren's scores\n\n## these lines summarize the aggregation rules followed:\n## (probably don't use)\ncomponents=welfareagg\nattach(components)\ncomponents$totalwelfare=(Q3 +Q4.1 +Q4.2+ Q5 +Q6.1 +Q6.2 +Q7 -Q8 +Q9 +Q10)\ncomponents$totalswb=(SWB.Q1 + SWB.Q2 + SWB.Q3 + SWB.Q4)\ncomponents$welfareswb=(Q3 +Q4.1 +Q4.2+ Q5 +Q6.1 +Q6.2 +Q7 -Q8 +Q9 +Q10+SWB.Q1 + SWB.Q2 + SWB.Q3 + SWB.Q4)\ndetach(components)\n\n\n\n\n## What do we want?\n## \n## counts of a variety of negative and positive behaviors\n## regurgitation, cacophagy, urine drinking, plucking,\n## play, grooming and receiving\n##\n## How do we deal with imbalanced collection of data?\n## - focals are supposed to be broadly matched across all indivuals\n## - scans?... balance by noting number of scans in which they appear?\n##\n## Alternative: modeling all data at once\n##  e.g. categorical -> binary variables in scans\n##\n## two different models: one for negative (focal), one for positive (scan) behaviours\n\n\n\n\n\n\n\n### importing social data\n\n\nscans <- read.csv(\"Scans.csv\")\n# from this we get Play, Allo-grooming, Auto-grooming\ntable(scans$PE)[9]/sum(scans$PE!='OOS') # play\n\nsum(scans$PE!='OOS')\n\nsum(scans$KD!='OOS')\nsum(scans$LB!='OOS')\n\nlibrary(reshape2)\nlibrary(plyr)\nmeltedScan = melt(scans, id.vars = c(1:10) #, variable.name = scan.vars\n                  )\nmeltedScan = meltedScan[meltedScan$Scan.Interval != '',] # remove some empties\nmeltedScan = meltedScan[meltedScan$variable != 'VL',]\n\nmeltedScan$value = as.factor(meltedScan$value)\ntable(meltedScan$value)\n\nmeltedScan$value = revalue(meltedScan$value, c(\"FO?\"=\"FO\",\"GR\"=\"G+R\",\"R \"=\"R\",\"R+G\"=\"G+R\",\"R+R\"=\"R\",\"R+SG\"=\"SG+R\",\"RE \"=\"RE\")\n                              )\nmeltedScan = meltedScan[(!meltedScan$value %in% c('','?','DA','LB')),]\nmeltedScan = droplevels(meltedScan)\n\nmeltedScan$variable = revalue(meltedScan$variable, c(CI=\"Cindy\", DA=\"David\", ED=\"Edith\", EM=\"Emma\", EV=\"Eva\", FK=\"Frek\", HL=\"Heleen\", KD=\"Kindia\",\n                                               KL=\"Kilimi\", LB=\"Liberius\", LI=\"Lianne\", LO=\"Louis\", LU=\"Lucy\", PA=\"Paul\", PE=\"Pearl\",\n                                               Q=\"Qafzeh\", RE=\"Rene\", SO=\"Sofie\"))\n\n\nrecastScan = cbind(meltedScan,model.matrix( ~ 0 + value, meltedScan))\n\nfocals <- read.csv('Focals.csv', strip.white = T)\n\ntable(focals$Regurgitated)\ntable(focals$Did.focal.eat.faeces)\ntable(focals$Did.focal.drink.or.touch.urine)\ntable(focals$Did.focal.self.groom)\ntable(focals$Self.fur.pluck)\ntable(focals$Focal.plucked.fur.from.another)\ntable(focals$Focal.fur.plucked.by.another)\n\n\n\n\ngroom <- read.csv(\"Grooming.csv\")\n\n\n### WF ratings\n# we have two time points\n\nwf = read.csv(file = \"Edinburgh chimp welfare ratings.csv\")\n\n# t1 = July to December, 2014\n\nfocals1 = focals[focals$Month %in% c(\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\") & focals$Year == 2014,]\n\nfocals1$Focal.ID = revalue(focals1$Focal.ID, c(CI=\"Cindy\", DA=\"David\", ED=\"Edith\", EM=\"Emma\", EV=\"Eva\", FK=\"Frek\", HL=\"Heleen\", KD=\"Kindia\",\n                                               KL=\"Kilimi\", LB=\"Liberius\", LI=\"Lianne\", LO=\"Louis\", LU=\"Lucy\", PA=\"Paul\", PE=\"Pearl\",\n                                               Q=\"Qafzeh\", RE=\"Rene\", SO=\"Sofie\"))\n\nfocals1 = focals1[focals1$Focal.ID != '',]\n\n#table(focals1$Did.focal.drink.or.touch.urine) # this var is clean...\n\nfocals1$Regurgitated = revalue(focals1$Regurgitated, c(\"n\"=\"N\",\"N/A\"=\"N\"))\nlevels(focals1$Regurgitated)[1] = 'N'\n\ntable\n\n\n# t2 = January to June, 2015\n\n## Scans\nscans2 = meltedScan[meltedScan$Month %in% c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\") & meltedScan$Year == 2015,]\n\n## Focals\nfocals2 = focals[focals$Month %in% c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\") & focals$Year == 2015,]\n#levels(focals2$Focal.ID)\n\n# all kinds of shit cleaning\nfocals2$Focal.ID = revalue(focals2$Focal.ID, c(CI=\"Cindy\", DA=\"David\", ED=\"Edith\", EM=\"Emma\", EV=\"Eva\", FK=\"Frek\", HL=\"Heleen\", KD=\"Kindia\",\n                            KL=\"Kilimi\", LB=\"Liberius\", LI=\"Lianne\", LO=\"Louis\", LU=\"Lucy\", PA=\"Paul\", PE=\"Pearl\",\n                            Q=\"Qafzeh\", RE=\"Rene\", SO=\"Sofie\"))\n\nfocals2 = focals2[focals2$Focal.ID != '',]\n\nlevels(focals2$Did.focal.drink.or.touch.urine)[1] <- 'N'\n\ntable(focals2$Self.fur.pluck)\nlevels(focals2$Self.fur.pluck)[7] <- 'Y'\nlevels(focals2$Self.fur.pluck)[1] <- 'N'\n\nlevels(focals2$Did.focal.eat.faeces)[1] <- 'N'\n\n#focals2$Did.focal.drink.or.touch.urine = revalue(\"N\"=\"N\", \"D\"=\"Y\"#, \"\"=N\n #                                                )\n\nfocals2$Focal.fur.plucked.by.another = revalue(focals2$Focal.fur.plucked.by.another,c(\"Y KD\"=\"Y\",\"Y PE\"=\"Y\", \"Y SO\"=\"Y\",\"Y? Q\"=\"Y\"))\nlevels(focals2$Focal.fur.plucked.by.another)[1] <- 'N'\n\nfocals2$Focal.plucked.fur.from.another = revalue(focals2$Focal.plucked.fur.from.another,c(\"Y CI\"=\"Y\",\"Y KD\"=\"Y\",\"Y? PE\"=\"Y\", \n                                                                                        \"Y LB\"=\"Y\",\"Y LI\"=\"Y\",\"Y? CI\"=\"Y\",\n                                                                                        \"Y? KD LB\"))\nlevels(focals2$Focal.plucked.fur.from.another)[1] <- 'N'\n\n#table(focals2$Focal.plucked.fur.from.another)\n\nfocals2$Focal.displaced.by.another = revalue(focals2$Focal.displaced.by.another, c(\"Y? ED\"=\"Y\",\"Y? RE\"=\"Y\"))\nlevels(focals2$Focal.displaced.by.another)[1] = 'N'\n\ntemp = merge(focals2, wf[wf$time==2,], by.x= \"Focal.ID\", \"Chimp\")\n\n#table(focals2$Did.focal.self.groom)\n\n\n\nlibrary(lme4)\n\nfwf.1 <- lmer(totalwelfare ~ Regurgitated + Did.focal.eat.faeces + Did.focal.drink.or.touch.urine +\n   Self.fur.pluck + Focal.plucked.fur.from.another + Focal.fur.plucked.by.another +\n   Did.focal.self.groom \n   + (1 | Focal.ID) #+ (1 | Month) + (1 | Day)\n              ,data = temp\n              )  \n\nfwf.1z <- lmer(totalwelfare ~ Regurgitated + (1 | Focal.ID) #+ (1 | Month) + (1 | Day)\n               ,data = temp\n)  \n\nrelgrad <- with(fwf.1@optinfo$derivs,solve(Hessian,gradient))\nmax(abs(relgrad))\n\ntt <- getME(fwf.1,\"theta\")\nll <- getME(fwf.1,\"lower\")\nmin(tt[ll==0])\n\nlibrary(optimx)\nfwf.LBFGSB <- update(fwf.1,control=lmerControl(optimizer=\"optimx\",\n                                                   optCtrl=list(method=\"L-BFGS-B\")))\nfwf.nlminb <- update(fwf.1,control=lmerControl(optimizer=\"optimx\",\n                                               optCtrl=list(method=\"nlminb\")))\n# none of the above can fix the problem\n\n\n\nfwf.0.regurg <- glmer(Regurgitated ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                family=binomial(link=\"logit\")) # *\n\nfwf.0.f_eat <- glmer(Did.focal.eat.faeces ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                family=binomial(link=\"logit\")) # *\n\nfwf.0.f_drink <- glmer(Did.focal.drink.or.touch.urine ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                     family=binomial(link=\"logit\"))\n\nfwf.0.f_spluck <- glmer(Self.fur.pluck ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                       family=binomial(link=\"logit\"))\n\nfwf.0.f_allopluck <- glmer(Focal.plucked.fur.from.another ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                        family=binomial(link=\"logit\"))\n\nfwf.0.f_pluckby <- glmer(Focal.fur.plucked.by.another ~ totalwelfare + (1 | Focal.ID ), data = temp,\n                        family=binomial(link=\"logit\"))\n\nSelf.fur.pluck\nDid.focal.drink.or.touch.urine\n\n\n\n\nlibrary(glmnet)\n\nnetform2 <- droplevels(temp[,c(21,29,31,32,33,35,36,37)])\n\nnetform2 = model.matrix(~ . - 1, data=netform2)\n#netform2 = Matrix(netform2, sparse=TRUE)\ninherits(netform2, \"sparseMatrix\")\n\nnetform2 = netform2[,c(2,3,4,5,6,7,8,9)]\n\nnetform2 <- netform2[, ncol(netform2):1]\n\n### full diagnostics\n\n# will need to run multiple cv's, for lambda and alpha\n# http://stats.stackexchange.com/questions/84012/choosing-optimal-alpha-in-elastic-net-logistic-regression\n\n# Questions:\n#\n# standardize = F ?\n# what parameters can I change and covTest remains consistent?\n#\n# http://web.stanford.edu/~hastie/TALKS/glmnet_webinar.pdf\n# # https://web.stanford.edu/~hastie/glmnet/glmnet_alpha.html # sparse matrices at bottom\n\n\nfwf2.net <- glmnet(netform2, temp$totalwelfare,\n                   family = \"gaussian\",\n                   standardize=T, alpha = 0.7,lambda.min.ratio=0.00001,  nlambda=1000\n                   #nlambda=1000, lambda.min.ratio = 0.00001\n                   )\n#plot(fwf2.net)\n\nfwf2.cvnet <- cv.glmnet(netform2, temp$totalwelfare,\n                   family = \"gaussian\", nfolds=20)\nplot(fwf2.cvnet)\n# coef(fwf2.cvnet, \n#      #s=min(fwf2.net$lambda)\n#      s=fwf2.net$lambda[40]\n#      ,exact=F\n# )\n\ncoef(fwf2.net, \n     s=fwf2.cvnet$lambda.min\n     #s=fwf2.cvnet$lambda.1se\n)\nplot(fwf2.net)\nplot(fwf2.net, xvar=\"lambda\", label=T)  \nplot(fwf2.net, xvar=\"dev\", label=T)  \n\n# glmnetCovTest(fwf2.net, netform2, temp$totalwelfare)\n\n# library(hdlm)\n# summary(fwf2.net)\n\nlibrary(lars)\ntst.lars  <- lars(netform2, temp$totalwelfare, type=\"lasso\", intercept=T,max.steps = 100000)\n#lcv.fwf2.net <- cv.lars(netform2, temp$totalwelfare, type=\"lasso\",plot.it=T,se=T)\ncoef(tst.lars)\n\n# library(covTest)\ncvl.fwf2 <- covTest(tst.lars, netform2, temp$totalwelfare)\ncovTest(tst.lars, netform2, temp$totalwelfare)\n\n# taking it back to OLS\n\n\nfwf2.ols <- lmer(totalwelfare ~ Regurgitated + Did.focal.eat.faeces + Did.focal.drink.or.touch.urine +\n             Focal.displaced.by.another\n              + (1 | Focal.ID) #+ (1 | Month) + (1 | Day)\n              ,data = temp\n)\n# still not working...\n\n\n\n### more useful glmnet links\n# http://stats.stackexchange.com/questions/70249/feature-selection-model-with-glmnet-on-methylation-data-pn\n# http://stats.stackexchange.com/questions/77546/how-to-interpret-glmnet\n# http://stats.stackexchange.com/questions/34859/how-to-present-results-of-a-lasso-using-glmnet\n\n\n",
    "created" : 1445435545948.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2885070432",
    "id" : "12BB1143",
    "lastKnownWriteTime" : 1447874942,
    "path" : "C:/Users/s1229179/GitHub/R/Mona + Budongo welfare/BehaviorWF_Mods.R",
    "project_path" : "BehaviorWF_Mods.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}