{
    "contents" : "\nsetwd('./csv')\n\nsheets = list.files(pattern=\"*.csv\")\n\n# sort by animal, from here\n\n\nbehav_dat = NULL\n\n## Notes: variables need to be standardized for capitalization\n##        a particular time standardization has been determined as well\n\n\n#i = 1 # David\ni = 4 # Lucy (new)\n#i = 6 # Pearl\n#i = 7 # Pearl++ new and improved (and fake)\n\ni = 2 \n\nprocess_sheet <- function(indat){\n  # this function takes a single sheet (currently by index) and\n  # returns a df of the meaningful events, as specified by design doc\n  \n  # function can be used to append sheets to one another to create \n  # a mass df for mixed modeling\n  \n  \n  temp_dat = NULL\n  temp_dat = read.csv(sheets[i], skip=1, header=TRUE)\n  \n  dmtd = dim(temp_dat) # this is real useful\n  \n  # fill out chimp, day, start time\n  temp_dat$Chimp = temp_dat$Chimp[1]\n  temp_dat$Day = temp_dat$Day[1] # this may need to be further processed into a datetime object\n  temp_dat$Start.time = temp_dat$Start.time[1]\n  \n  # append total length as new column and adjust final row, Time\n  # !!! this needs to be done with Date's, not numerics, otherwise the times will be wrong\n  # so the data needs to be properly standardized\n  # currently this works for Lucy 07-10 data\n  ## once Lucy 07-10 has been modified by dividing time by 60\n \n  temp_dat$total.length = strptime(substring(temp_dat$Time[dmtd[1]]\n                                               ,7), format='%M')\n  # same for the above guy, it needs to be a certain length string-phrase to exclude\n  # (but the numeric aspect works... for now)\n  \n  temp_dat$Time = strptime(levels(temp_dat$Time)[temp_dat$Time],format=\"%H:%M:%S\")\n  #temp_dat$Time = as.numeric(levels(temp_dat$Time))[temp_dat$Time] # obsolete\n  temp_dat$Time[dmtd[1]]=temp_dat$total.length[1] # may need later adjusts\n  \n  # code time differences for all behaviors (col D)\n  for(j in 1 : dim(temp_dat)[1]-1){\n    temp_dat$behav.length[j] = difftime(temp_dat$Time[j+1],temp_dat$Time[j],units=\"secs\")\n    # the last row has the wrong value\n  }\n  \n  # accounting for all the state behaviors\n  temp_dat$time.Forag = sum(temp_dat$behav.length[temp_dat$Fo == 'x'])\n  temp_dat$time.RestGroom = sum(temp_dat$behav.length[temp_dat$Re.Gr == 'x'])\n  temp_dat$time.Travel = sum(temp_dat$behav.length[temp_dat$Tr == 'x'])\n  temp_dat$time.Forag = sum(temp_dat$behav.length[temp_dat$Fo == 'x'])\n  temp_dat$time.Play = sum(temp_dat$behav.length[temp_dat$Pl == 'x'])\n  temp_dat$time.Di = sum(temp_dat$behav.length[temp_dat$Di == 'x'])\n  \n  # AlloGrooming and Aggression are handled a little differently\n  temp_dat$time.AlloGr.give = sum(temp_dat$behav.length[temp_dat$AG == 'give'])\n  temp_dat$time.AlloGr.receive = sum(temp_dat$behav.length[temp_dat$AG == 'receive'])\n  temp_dat$time.AlloGr.mutual = sum(temp_dat$behav.length[temp_dat$AG == 'mutual'])\n  temp_dat$time.AlloGr.total = temp_dat$time.AlloGr.give+temp_dat$time.AlloGr.receive+temp_dat$time.AlloGr.mutual\n  \n  temp_dat$time.Aggress.give = sum(temp_dat$behav.length[temp_dat$Ag == 'give'])\n  temp_dat$time.Aggress.receive = sum(temp_dat$behav.length[temp_dat$Ag == 'receive'])\n  temp_dat$time.Aggress.mutual = sum(temp_dat$behav.length[temp_dat$Ag == 'mutual'])\n  temp_dat$time.Aggress.total = colSums(rbind(temp_dat$time.Aggress.give,temp_dat$time.Aggress.receive,\n                                              temp_dat$time.Aggress.mutual))\n  #summing these guys when they're full of NAs is a problem\n  \n  \n  # OoS totaling\n  ### TODO does not papear ot be working\n  if ('x' %in% temp_dat$OS){\n    temp_dat$any.OS = 'Y'\n    temp_dat$total.OS = sum(temp_dat$behav.length[temp_dat$OS=='x'])\n    \n  } else {\n    temp_dat$any.OS = 'N'\n    temp_dat$total.OS = NA    \n  }\n  \n  # where does chimp spend the longest time?  \n  areaTotals = aggregate(temp_dat$behav.length, list(temp_dat$Pod), sum)\n  areaTotals = areaTotals[areaTotals$Group.1 != '',]\n  \n  if ('1' %in% areaTotals$Group.1){\n    temp_dat$time.pod1 = areaTotals$x[areaTotals$Group.1 == '1']    \n  } else {\n    temp_dat$time.pod1=NA\n  }\n  if ('2' %in% areaTotals$Group.1){\n    temp_dat$time.pod2 = areaTotals$x[areaTotals$Group.1 == '2']    \n  } else {\n    temp_dat$time.pod2=NA\n  }\n  if ('3' %in% areaTotals$Group.1){\n    temp_dat$time.pod3 = areaTotals$x[areaTotals$Group.1 == '3']    \n  } else {\n    temp_dat$time.pod3=NA\n  }\n  if ('Outside' %in% areaTotals$Group.1){\n    temp_dat$time.out = areaTotals$x[areaTotals$Group.1 == 'Outside']    \n  } else {\n    temp_dat$time.out=NA\n  }\n  \n  \n  \n  # Aggression tabulating\n  if ('x' %in% temp_dat$Ag){\n    temp_dat$any.Ag = 'Y'\n    \n  } else {\n    temp_dat$any.Ag = 'N'\n  }\n  \n  \n  # for the extended Lucy example, this reliead on col Q\n  # but O and P should function exactly the same\n  \n  # Time spent (at all) _near_ others (Q)\n  temp_dat$total.near.others = sum(temp_dat$behav.length[temp_dat$X.Near.others.!=''])\n  #table(temp_dat$X.Near.others.)\n  \n  dyad_list = aggregate(temp_dat$behav.length,by=list(temp_dat$X.Near.others.), FUN=sum)\n  indx = dim(dyad_list)[1]>1\n  temp_dat$most.near =  ifelse(indx,\n          as.character(dyad_list[2,1]),\n         NA)\n\n  # Time spent sitting with conspecifics\n  temp_dat$total.with.others = sum(temp_dat$behav.length[temp_dat$Sitting.with.conspecific!=''])\n  \n  dyad_list = aggregate(temp_dat$behav.length,by=list(temp_dat$Sitting.with.conspecific.), FUN=sum)\n  indx = dim(dyad_list)[1]>1\n  temp_dat$most.sit.with =  ifelse(indx,\n                               as.character(dyad_list[2,1]),\n                               NA)\n  \n  # Time(s) spent grooming with conspecific\n  temp_dat$total.groom.others = sum(temp_dat$behav.length[temp_dat$Grooming.with.conspecific.!=''])\n  \n  dyad_list = aggregate(temp_dat$behav.length,by=list(temp_dat$Grooming.with.conspecific.), FUN=sum)\n  indx = dim(dyad_list)[1]>1\n  temp_dat$most.groom.with =  ifelse(indx,\n                                   as.character(dyad_list[2,1]),\n                                   NA)\n  \n  \n  ## Emotion - column R onwards\n  temp_dat$total.emotion.events = sum(temp_dat$Full.Display..hoots.only..or.fight.!='')\n  \n  \n  # filter_dat is a new df which is expanded and fit with room for current and previous events:\n  filter_dat <- NULL\n  \n  # identifying rows with emotional events (R complete) *or* reconciliation behav.s\n  # and recording previous states where relevant\n  for (j in 2:dmtd[1]){\n    if ((temp_dat$Full.Display..hoots.only..or.fight.[j] != '') | \n        (temp_dat$Full.Display..hoots.only..or.fight.[j] == NA) |\n        (temp_dat$Does.focal.show.consolation.behaviour.after.a.fight.between.conspecifics.[j] != '' &\n         !is.na(temp_dat$Does.focal.show.consolation.behaviour.after.a.fight.between.conspecifics.[j]) \n        ) | \n        (temp_dat$Name.of.conspecific.s..fought.with[j] != '' &  \n         !is.na(temp_dat$Name.of.conspecific.s..fought.with[j]))\n       ){\n      filter_dat = rbind(filter_dat,cbind(temp_dat[j,],temp_dat[j-1,]))\n    }\n  }\n  \n  return(filter_dat)\n}\n\n\n\n### below is incomplete and needs to be tailored to the preferred directory/spreadsheet setup\n\nfor (i in 1:length(sheets)){\n  process_sheet(i)  # fill in later\n  \n  \n}\n\n\ntemp_dat = read.csv(sheets[i], skip=1, header=TRUE)\n\n\n\n\ntemp_dat$length = as.numeric(substring(temp_dat$Time[dim(temp_dat)[1]],7))\n\n\n\nsetwd('..')\n",
    "created" : 1436354796859.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "206881060",
    "id" : "6852557F",
    "lastKnownWriteTime" : 1437747394,
    "path" : "C:/Users/s1229179/GitHub/R/VADW Budongo emotion/import_process.R",
    "project_path" : "import_process.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}