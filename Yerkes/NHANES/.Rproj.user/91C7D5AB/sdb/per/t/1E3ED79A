{
    "collab_server" : "",
    "contents" : "# depends import.R\n\nlibrary(psych)\n\n\n### Summarizing data\ndescribe(c.bm.m)\ndescribe(sel.nbm)\n\n\n\n### Checking data\n\n#KMO(sel.nbm[complete.cases(sel.nbm),4:35])\n# Overall MSA =  0.55\n# MSA for each item = \n#   wbc           rbc           hct           hgb           mcv           mch          mchc \n# 0.62          0.65          0.56          0.64          0.47          0.55          0.52 \n# lymph         monos           eos       Glucose           BUN      Creatine       Protein \n# 0.65          0.65          0.70          0.44          0.54          0.69          0.33 \n# Albumn      Bilirubn       alkphos          sgpt          sgot   cholesterol       calcium \n# 0.39          0.79          0.60          0.64          0.62          0.73          0.84 \n# phosphate        sodium     potassium      chloride      globulin triglycerides          ggtp \n# 0.69          0.38          0.75          0.59          0.34          0.76          0.82 \n# osmolal           BMI           BPs           BPd \n# 0.45          0.84          0.70          0.71 \ncortest.bartlett(sel.nbm[complete.cases(sel.nbm),4:35])\n# $chisq\n# [1] 147700.3\n# \n# $p.value\n# [1] 0\n# \n# $df\n# [1] 496\n\n#KMO(c.bm.m[complete.cases(c.bm.m),c(4:35)])\n# Overall MSA =  0.41\n# MSA for each item = \n#   wbc           rbc           hct           hgb           mcv           mch          mchc \n# 0.23          0.52          0.53          0.80          0.43          0.39          0.16 \n# lymph         monos           eos       Glucose           BUN      Creatine       Protein \n# 0.39          0.35          0.44          0.17          0.29          0.52          0.44 \n# Albumn      Bilirubn       alkphos          sgpt          sgot   cholesterol       calcium \n# 0.28          0.45          0.79          0.31          0.26          0.32          0.34 \n# phosphate        sodium     potassium      chloride      globulin triglycerides          ggtp \n# 0.69          0.32          0.30          0.34          0.47          0.54          0.32 \n# osmolal           BMI           BPs           BPd \n# 0.33          0.46          0.44          0.56 \ncortest.bartlett(c.bm.m[complete.cases(c.bm.m),c(4:35)])\n# $chisq\n# [1] 1740.464\n# \n# $p.value\n# [1] 9.475263e-138\n# \n# $df\n# [1] 496\n\n\n\n### Humans\n\ndim(sel.nbm[complete.cases(sel.nbm),])\n\n\n#colnames(sel.nbm)[3:31] <- colnames(c.bm)[5:33]\ncolnames(sel.nbm)[4:35] <- colnames(c.bm)[5:36]\n\n\nfa.parallel(sel.nbm[complete.cases(sel.nbm),c(4:35)], fm = 'gls') #  pa?\n # seem like 10\n\nnfactors(sel.nbm[complete.cases(sel.nbm),c(4:35)], fm = 'gls')\nplot(nfactors(sel.nbm[complete.cases(sel.nbm),c(4:35)], fm = 'gls')$map)\n\n\nEFA.Comp.Data(sel.nbm[complete.cases(sel.nbm),c(4:35)], F.Max = 15, Graph = T)\n# okay fine, 10\n# no wait... 9\n\n\nfa.1 <- fa(sel.nbm[,c(3:31)], nfactors = 10, fm = 'minres'\n   )\n\nfa.1a <- fa(sel.nbm[complete.cases(sel.nbm),c(3:31)], nfactors = 10, fm = 'minres'\n)\n\nfa.1x <- fa(sel.nbm[complete.cases(sel.nbm),c(3:31)], nfactors = 10, fm = 'ml'\n)\n\n# PCA - a better model for AL\n\n\n\n\n# pa.1 <- principal(sel.nbm[,c(3:31)], nfactors = 10\n# )\npa.10 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 10, rotate='varimax'\n) # S, B, C, T, G ...\n# this one is interesting: D does load at 0.45, but it has a -0.5 higher loading elsewhere\nprint(loadings(pa.10), cutoff = 0.3, sort =T)\n\n\npa.9 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 9, rotate='varimax'\n) # S, B, C; Albu?, lymph?\n\npa.8 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 8, rotate='varimax'\n) # S, D, B, C; Phos, ALP, Eos?\n\npa.7 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 7, rotate='varimax'\n) # S, D, B, C; Phos, ALP, Eos?\n\npa.6 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 6, rotate='varimax'\n) # S, D, B, C, T; ALP, Phos, Eos?\n\npa.5 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 5, rotate='varimax',\n                  scores = T, missing = T, impute = 'median'\n) # S, D, B, G, C, T; ALP, Phos, Lymph, WBC?, Eos?\n\npa.4 <- principal(sel.nbm[sampl.pca,c(4:35)], nfactors = 4, rotate='varimax'\n) # S, D, B, C; ... \n# 4 is not a very good model - end here.\n\nprint(loadings(pa.5), cutoff = 0.3, sort =T)\n\nfa.sort(pa.5)\n\nfa.sort(pa.10)\nfa.sort(efa.10)\n\n# Note that Creatinine never loads with the main metabolic factor,\n# but essentially always does with BUN, and sometimes with Glucose, osmolal, potassium, protein, etc.\n\n\n\n### We want to do factor stuff, so do the component and factor structures look similar enough?\n\nefa.10 <- fa(sel.nbm[sampl.pca,c(4:35)], nfactors = 10, rotate='varimax', fm = 'minres'\n            , scores = 'tenBerge', missing = T, impute = 'median'\n)\n\n\nefa.5 <- fa(sel.nbm[sampl.pca,c(4:35)], nfactors = 5, rotate='varimax', fm = 'minres',\n            scores = 'tenBerge', missing = T, impute = 'median'\n)\n\nfa.sort(efa.5)\nfa.sort(pa.5)\n\n# They look identical. We can move ahead.\n\n\n\n\n\n\n\n### Chimps\n\nnfactors(c.bm[,c(4:35)], fm = 'ml') #  pa?\n\n#fa.parallel(c.bm[,c(5:36)], fm = 'minres') #  pa?\nfa.parallel(c.bm.m[,c(4:35)], fm = 'ml') #  pa?\n\n# chokes on missing data...\nEFA.Comp.Data(c.bm.m[complete.cases(c.bm.m),c(4:35)], F.Max = 15, Graph = T)\n\n# DO NOT RUN\n\nfa.c.1 <- fa(c.bm[,c(5:36)], nfactors = 10, fm = 'minres'\n)\n\npa.c.10 <- principal(#c.bm[,c(5:36)],\n  c.bm.m[,c(4:35)],\n  nfactors = 10)\npa.c.5 <- principal(#c.bm[,c(5:36)],\n  c.bm.m[,c(4:35)],\n  nfactors = 5)\n\n\n\nc.fa.10 <- fa(c.bm.m[,c(4:35)], nfactors = 10, rotate='varimax', fm = 'minres'\n      , scores = 'tenBerge', missing = T, impute = 'median'\n)\n\n\nc.fa.5 <- fa(c.bm.m[,c(4:35)], nfactors = 5, rotate='varimax', fm = 'minres',\n            scores = 'tenBerge', missing = T, impute = 'median'\n)\nfa.sort(c.fa.10)\n\n\n\n### Factor/Component structure comparisons\n\n# Congruence\n\nfactor.congruence(fa.c.1$loadings, fa.1$loadings)\n       MR1   MR2   MR3   MR9   MR4   MR7   MR5  MR10   MR6   MR8\nMR1   0.79  0.06 -0.05  0.05  0.22 -0.19  0.27 -0.02  0.10 -0.07\nMR3   0.09  0.88 -0.22 -0.08 -0.03  0.11  0.06 -0.07  0.23 -0.08\nMR4  -0.11  0.01 -0.12  0.57  0.07 -0.26  0.00 -0.03 -0.01  0.05\nMR2   0.16  0.05  0.02  0.04 -0.11  0.15  0.55  0.61  0.07  0.09\nMR5   0.03 -0.05 -0.56  0.18  0.42 -0.03 -0.17  0.21  0.17 -0.19\nMR6  -0.01  0.04  0.13  0.28  0.20  0.76  0.05  0.06 -0.11 -0.09\nMR10 -0.01  0.03  0.20 -0.24  0.47 -0.17 -0.22  0.21  0.63  0.05\nMR8   0.03  0.06  0.16  0.15 -0.14  0.17  0.19 -0.04  0.08  0.20\nMR7  -0.01 -0.07  0.30  0.13  0.08  0.05 -0.08 -0.09  0.10  0.00\nMR9   0.02  0.08 -0.08  0.23  0.02 -0.01 -0.23  0.10  0.03  0.65\n\n# factors with decent similarity:\n# (C)   (H)\n# MR3 - MR2\n# MR4 - MR9\n# MR2 - MR10 (?)\n# MR5 - MR3 (?)\n# MR6 - MR7\n# MR10 - MR6\n# MR9 - MR8\n\n\n\nfactor.congruence(pa.c.1$loadings, pa.1$loadings)\n       PC1   PC2   PC5   PC4   PC9  PC10   PC3   PC6   PC7   PC8\nPC1   0.81  0.16  0.13  0.03 -0.14  0.28 -0.06 -0.16 -0.11  0.01\nPC3   0.13  0.89  0.06 -0.06  0.09  0.03  0.18 -0.24 -0.17  0.07\nPC2   0.22  0.10  0.85 -0.02  0.20  0.06  0.18 -0.02  0.04  0.02\nPC4  -0.07 -0.06 -0.06  0.68 -0.17  0.04 -0.17 -0.10 -0.17 -0.04\nPC5  -0.09 -0.18  0.09 -0.16  0.03 -0.21  0.27  0.59 -0.46 -0.02\nPC6   0.01 -0.03  0.10  0.25  0.88  0.12  0.15  0.10 -0.10  0.05\nPC10 -0.04  0.23 -0.02 -0.16 -0.18  0.46 -0.47  0.08  0.25 -0.10\nPC8   0.06  0.04  0.23  0.05  0.16 -0.16  0.35  0.18 -0.07  0.16\nPC7  -0.04 -0.03 -0.09  0.08 -0.04  0.17  0.18  0.21  0.56  0.23\nPC9  -0.14 -0.06 -0.01  0.23 -0.09  0.34  0.05 -0.04 -0.02  0.66\n\n# components with decent similarity:\n# (C)   (H)\nPC1 - PC1\nPC3 - PC2\nPC2 - PC5\nPC4 ~ PC4\nPC5 ~ PC6\nPC6 ~ PC9\nPC7 ~ PC7?\nPC9 ~ PC8\nPC8 ~ ?\nPC10 ~ ?\n\n\n\n# Procrustes, using code from the group\n\nprocrustes(fa.c.1$loadings, fa.1$loadings)\n\nprocrustes(fa.c.1$loadings, fa.1$loadings[,c(1:5,10,9,7,8,6)])\n\n\n0.793876724  8.809095e-01  0.71974158  0.747031357  0.59239310  0.82627457\n0.600784478  0.627731145  0.56643907  0.684564831  \n0.7193371\n\n\npcrust = procrustes(fa.1$loadings, fa.c.1$loadings)\n\npcrust = protest(fa.1$loadings, fa.c.1$loadings)\npspc = permustats(pcrust)\n\n\n\npcrusta = procrustes(pa.1$loadings, pa.c.1$loadings)\n0.841861752  0.892964096  0.864579231  0.756832481  0.803025736  0.891505227  0.7185726578\n0.311983995  0.629106243  0.816920692  0.7742925\n\n\n\n\npcrust = procrustes(pa.5$loadings, pa.c.5$loadings)\npspc = permustats(pcrust)\n       \nfactor.congruence(pa.5$loadings, pa.c.5$loadings) # human - rows; chimps - columns\n# Human RC3\n# Chimp RC4\n",
    "created" : 1459791720120.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "528771314",
    "id" : "1E3ED79A",
    "lastKnownWriteTime" : 1493052331,
    "last_content_update" : 1493052331033,
    "path" : "C:/Users/s1229179/GitHub/R/Yerkes/NHANES/factors.R",
    "project_path" : "factors.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}