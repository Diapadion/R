{
    "collab_server" : "",
    "contents" : "### new LASSO technique\n\n# run the other files first:\n# \n\nload(\"C:/Users/s1229179/GitHub/R/moneyline/.RData\")\n\n# one day, the above will not be necessary\n\n\nlibrary(glmnet)\n\n# what does predict() output?\nx=matrix(rnorm(100*20),100,20)\ny=rnorm(100)\ng2=sample(1:2,100,replace=TRUE)\ng4=sample(1:4,100,replace=TRUE)\nfit1=glmnet(x,y)\npredict(fit1,newx=x[1:5,],s=c(0.01,0.005))\npredict(fit1,type=\"coef\")\n\nlibrary(c060)\n\n\n\n\n# 2014\n\nnetform14 <- droplevels(kpDiffs14)\n\nnetform14 = model.matrix(~ . - 1, data=netform14)\n\n\nnet.diff.14 <- glmnet(netform14[,c(64:83)], netform14[,84], family=\"binomial\",\n                      standardize=T, alpha = 1,lambda.min.ratio=0.00001,  nlambda=1000)\n  \n \nnet.diff.14.cv <- cv.glmnet(netform14[,c(64:83)], netform14[,84], family=\"binomial\") \nplot(net.diff.14.cv)\n\ncoef(net.diff.14, \n     s=net.diff.14.cv$lambda.min\n     #s=net.diff.14.cv$lambda.1se\n)\n\n\n\n\n# 2013\n\nnetform13 <- droplevels(kpDiffs13)\n\nnetform13 = model.matrix(~ . - 1, data=netform13)\n\n\nnet.diff.13 <- glmnet(netform13[,c(64:81)], netform13[,82], family=\"binomial\",\n                      standardize=T, alpha = 1,lambda.min.ratio=0.00001,  nlambda=1000)\n\n\nnet.diff.13.cv <- cv.glmnet(netform13[,c(64:81)], netform13[,82], family=\"binomial\") \nplot(net.diff.13.cv)\n\ncoef(net.diff.13, \n     s=net.diff.13.cv$lambda.min\n     #s=net.diff.14.cv$lambda.1se\n)\n\n\n\n# 2012\n\nnetform12 <- droplevels(kpDiffs12)\n\nnetform12 = model.matrix(~ . - 1, data=netform12)\n\n\nnet.diff.12 <- glmnet(netform12[,c(64:81)], netform12[,82], family=\"binomial\",\n                      standardize=T, alpha = 1,lambda.min.ratio=0.00001,  nlambda=1000)\n\n\nnet.diff.12.cv <- cv.glmnet(netform12[,c(64:81)], netform12[,82], family=\"binomial\") \nplot(net.diff.12.cv)\n\ncoef(net.diff.12, \n     s=net.diff.12.cv$lambda.min\n     #s=net.diff.14.cv$lambda.1se\n)\n\n\n\n### This is the new shit\n\nbracket11 <- read.csv('2011.csv')\nbracket12 <- read.csv('2012.csv')\nbracket13 <- read.csv('2013.csv')\nbracket14 <- read.csv('2014.csv')\n\n\nkp14 <- read.csv('KP2014.csv')\nkp11 <- read.csv('KP2011.csv')\nkp13 <- read.csv('KP2013.csv')\nkp12 <- read.csv('KP2012.csv')\n\nkp14$Team = gsub(\"\\\\ [0-9]*$\", \"\", kp14$Team)\nkp13$Team = gsub(\"\\\\ [0-9]*$\", \"\", kp13$Team)\nkp12$Team = gsub(\"\\\\ [0-9]*$\", \"\", kp12$Team)\nkp11$Team = gsub(\"\\\\ [0-9]*$\", \"\", kp11$Team)\n\n\n### need to add the winning columns all on top of each other\n\n# this was is missing some final games... \n# I don't deem those important, if anything, we should cut out more later games\n\nstack14 <- NULL\nstack14 <- rbind(na.omit(bracket14[,4:5]),\n                 setNames(na.omit(bracket14[,9:10]), names(bracket14[,4:5])),\n                 setNames(na.omit(bracket14[,14:15]), names(bracket14[,4:5])),\n                 setNames(na.omit(bracket14[,19:20]), names(bracket14[,4:5])),\n                 setNames(na.omit(bracket14[,24:25]), names(bracket14[,4:5])))\nstack14$year = 14   \nstack14$rowID = 1:nrow(stack14)\n\nstack14 <- merge(stack14, kp14, by=\"Team\")\nstack14 <- stack14[order(stack14$rowID), ]\n\n\nstack13 <- NULL\nstack13 <- rbind(na.omit(bracket13[,4:5]),\n                 setNames(na.omit(bracket13[,9:10]), names(bracket13[,4:5])),\n                 setNames(na.omit(bracket13[,14:15]), names(bracket13[,4:5])),\n                 setNames(na.omit(bracket13[,19:20]), names(bracket13[,4:5])),\n                 setNames(na.omit(bracket13[,24:25]), names(bracket13[,4:5])))\nstack13$year = 13   \nstack13$rowID = 1:nrow(stack13)\n\nstack13 <- merge(stack13, kp13, by=\"Team\")\nstack13 <- stack13[order(stack13$rowID), ]\n\n\nstack12 <- NULL\nstack12 <- rbind(na.omit(bracket12[,4:5]),\n                 setNames(na.omit(bracket12[,9:10]), names(bracket12[,4:5])),\n                 setNames(na.omit(bracket12[,14:15]), names(bracket12[,4:5])),\n                 setNames(na.omit(bracket12[,19:20]), names(bracket12[,4:5])),\n                 setNames(na.omit(bracket12[,24:25]), names(bracket12[,4:5])))\nstack12$year = 12   \nstack12$rowID = 1:nrow(stack12)\n\nstack12 <- merge(stack12, kp12, by=\"Team\")\nstack12 <- stack12[order(stack12$rowID), ]\n\n\nstack11 <- NULL\nstack11 <- rbind(na.omit(bracket11[,4:5]),\n                 setNames(na.omit(bracket11[,9:10]), names(bracket11[,4:5])),\n                 setNames(na.omit(bracket11[,14:15]), names(bracket11[,4:5])),\n                 setNames(na.omit(bracket11[,19:20]), names(bracket11[,4:5])),\n                 setNames(na.omit(bracket11[,24:25]), names(bracket11[,4:5])))\nstack11$year = 11   \nstack11$rowID = 1:nrow(stack11)\n\nstack11 <- merge(stack11, kp11, by=\"Team\")\nstack11 <- stack11[order(stack11$rowID), ]\n\n\nstacked <- rbind(stack14, stack13, stack12, stack11)\n\nmatchstack <- NULL\nj = 1\nfor (i in seq(1,dim(stacked)[1],2)){\n  matchstack = rbind(matchstack, cbind(stacked[i,c(1:4)],stacked[i,c(5:24)]-stacked[i+1,c(5:24)]))\n  j = j + 1\n  }\n  \nmatchstack$wins <- ifelse(matchstack$Round.1.Results == 'W', matchstack$wins <- 1, matchstack$wins <- 0)\n\nmatchstack$wins <- as.factor(matchstack$wins)\n\n### okay it's model time\n\ngm.stk <- glm(wins ~ 1 + SoS.Pyth + OppO + Rank + Pyth + AdjO +\n                AdjD + AdjT + Luck + OppO + OppD + NCSoS.Pyth\n                 , data = matchstack, family = binomial(logit))\n\n\nlibrary(lme4)\ngmm.stk <- glmer(wins ~ 1 + SoS.Pyth + OppO + Rank + Pyth + AdjO +\n                AdjD + AdjT + Luck + OppO + OppD + NCSoS.Pyth +\n              ( 1 + SoS.Pyth + OppO + Rank + Pyth + AdjO +\n                  AdjD + AdjT + Luck + OppO + OppD + NCSoS.Pyth | year)\n              , data = matchstack, family = binomial(logit))\n# convergence issues above\n\n\n\n# LASSO prep\n\nnetf_stk <- droplevels(matchstack)\n\nnetf_stk = model.matrix(~ . - 1, data=netf_stk[,c(5,8:24)])\n\n\nnet.stk <- glmnet(netf_stk, matchstack$wins, family=\"binomial\",\n                      standardize=T, alpha = 1,lambda.min.ratio=0.00001,  nlambda=1000)\n\n\nnet.stk.cv <- cv.glmnet(netf_stk, matchstack$wins, family=\"binomial\") \nplot(net.stk.cv)\n\ncoef(net.stk, \n     #s=net.stk.cv$lambda.min\n     s=net.stk.cv$lambda.1se\n)\n\n\ngm2.stk <- glm(wins ~ 1 + OppO + AdjO +\n                AdjD + Luck + OppD\n               #+ SoS.Pyth # NahI don't think we need it\n              , data = matchstack, family = binomial(logit))\n# from this, AdjO and AdjD (plus Luck) seem to be the real power predictors\n\nstep(gm.stk)\nstep(gm2.stk)\n\ngmm2.stk <- glmer(wins ~ 1 + OppO + AdjO + AdjD + Luck + OppD +\n                               (1 + OppO + AdjO +\n                                   AdjD + Luck + OppD | year)\n                             , data = matchstack, family = binomial(logit))\n\n\n### Tuning \n\nlibrary(caret)\n\neGrid <- expand.grid(.alpha = seq(0,1,0.01), \n                     .lambda = seq(0,2,0.01))\n\nControl <- trainControl(method = \"cv\", number = 3,verboseIter = F)\n\nnetFit <- train(x = netf_stk, y = matchstack$wins\n                , method = \"glmnet\",\n                metric = 'Kappa' #c(\"Accuracy\",\"Kappa\"),\n                , tuneGrid = eGrid,\n                trControl = Control )\n\nnet.stk <- glmnet(netf_stk, matchstack$wins, family=\"binomial\",\n                  standardize=T, alpha = 0.23,lambda.min.ratio=0.00001,  nlambda=1000)\n\nnet.stk.cv <- cv.glmnet(netf_stk, matchstack$wins, alpha = 0.23, family=\"binomial\") \nplot(net.stk.cv)\n\ncoef(net.stk, \n     #s=net.stk.cv$lambda.min\n     #s=net.stk.cv$lambda.1se\n     s = 0.13\n)\n\n### Stability Selection\n\nstab = stabpath(matchstack$wins, netf_stk, family = \"binomial\", weakness = 0.5)\n\nplot(stab)\n",
    "created" : 1452609739595.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "711520530",
    "id" : "F36C7CF1",
    "lastKnownWriteTime" : 1459879785,
    "last_content_update" : 1459879785469,
    "path" : "C:/Users/s1229179/GitHub/R/moneyline/lasso.R",
    "project_path" : "lasso.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}